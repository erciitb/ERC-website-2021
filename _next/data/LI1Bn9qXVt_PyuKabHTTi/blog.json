{"pageProps":{"allBlogs":[{"frontmatter":{"title":"Controls Theory","author":"Pranav Malpure","hero_image":"/ERC-website-2021/static/controls_theory_cover.jpg","date":"2021-11-25T13:50:00.000Z"},"markdownBody":"_Control theory is a branch of mathematics and engineering, which defines the conditions needed for a system to maintain a controlled output in the face of input variation_. In simple terms, we seek to stabilize our system through some control theory concepts when many factors can destabilize it. At the end of reading this article, you can expect to have an overview of control theory with some basic knowledge of PID control.\n\nTo understand this, first, let us know a few terms:\n\n1\\. **Input:** The set of instructions given to the system\n\n2\\. **Output:** Consists of a group of variables that describe the state of the system. Usually represented by ùë•\n\n3\\. **Control System:** The entire system, which includes a _controller_, _plant_, and _sensors_, is collectively known as a control system. The _plant_ is a part that is controlled. The _controller_ provides control commands to the plant. _Sensors_ measure the state of the system. See the flow diagram for reference:\n\n![](/ERC-website-2021/static/image9.png)\n\nTo put these terms into an application, let‚Äôs take the example of a person driving a car. (Pause here and try to identify what could be the input, output, and control system in this example.) So, in this case, the _input_ could be instructions given to the driver by his brain. The driver will be the _controller_, which controls the car using the instructions received. The vehicle will be the _plant_; sensors would be the speedometer, driver‚Äôs eyes to see the traffic, ears to listen to any horn, etc. The _output_ could be the velocity of the car, current traffic conditions on the road, etc.\n\nNow that you understand basic terms let's move on to classifying control systems.\n\nWe classify control systems on various bases, but the most prominent ones are:\n\n### 1. Based on feedback (output)\n\n* **Open-loop control system** - In this type of system, the input given to the controller is independent of the output. In the above car example, we can see that if the driver doesn‚Äôt pay heed to the current state of the system(the output) and drives it just based on some pre-learned instructions, then this system would be an open loop, as there are no changes made to the input depending on the output. As you must have noticed, this type of system is problematic as it cannot account for any uncertainties.\n* **Closed-loop control system** - Here, the input commands are based on the output received. For example, when a car stops in front, the driver‚Äôs input will change, and they will apply brakes.\n\n### 2. Based on energy expenditure\n\n* **Active** - In this type, a certain amount of energy is required to implement the control commands. For example, to accelerate the car, it will consume fuel.\n* **Passive** - This system involves minimal energy expenditure to implement the input into the system. For example, if the car goes downhill, it can be controlled by just applying the brakes.\n\nSince we now have an overview of control theory, let us bring some maths into the picture, let the input function be _u(t)_ and output function be _x(t)_.\n\nWondering what use maths is of? Read on...\n\n## Control Law\n\nVarious types of systems have different anomalies present in them. In many cases, we can express the output and correction to the input to control the system through some mathematical relation. This relation is known as a _control law_. So, a _control law_ is a mathematical law that relates output and input, along with other control command parameters or measurable properties of the state.\n\nExample:   \t\tu(t) = -K(x(t) - x0)\n\nThere are various control laws, such as _Linear Quadratic Regulator_ (the above example is an LQR), _PID control_, etc., which may be helpful in different scenarios. One such law is PID which is widely used even in industries because it is simple and works for almost every case.\n\n## Proportional-Integral-Derivative (PID)\n\nThe control law for PID is:\n\n![](/ERC-website-2021/static/image5.png)\n\nDon‚Äôt get overwhelmed with the equation! It‚Äôs pretty simple when you understand it.\n\nLet us understand what each term is:\n\n1\\. **Kp** is the proportional coefficient/weight\n\n2\\. **Kd** is the derivative coefficient/weight\n\n3\\. **Ki** is the integral coefficient/weight\n\n4\\. **Ti** is the integral time constant\n\n5\\. **Td** is the derivative time constant\n\nHere, _e(t)_ is the error between the desired and the actual state.\n\nThis law has three parts: **proportional**, **integral** and **derivative** parts; each one of them has its own importance.\n\n##### Proportional(P)\n\nIn this the input is linearly proportional to the error, which means that the error is just scaled using the constant **Kp**.\n\n##### Integral(I)\n\nThe integral of error over time is scaled with a constant **Ki**.\n\n##### Derivative(D)\n\nHere, the derivative of the error is scaled and multiplied by the constant **Kd**.\n\nEach of the above components aims to correct different causes of the error, and together these three combine to give us the best desired output.\n\nLet‚Äôs understand the use of all the above three components using an example of a self-driving car. We have to design the controls of the vehicle. The car is supposed to move on a given marked line. Let's start with our analysis:\n\nThe input given to the car is to turn its steering wheel to left or right by a fixed angle, as shown below.\n\n![](/ERC-website-2021/static/image8.png)\n\nBut there is a problem with this; we are instructing to turn the steering wheel by the same angle even if the car is slightly offset. This will make the vehicle constantly oscillate around the line, and the ride will be jerky, making it uncomfortable for the passengers.\n\n![](/ERC-website-2021/static/image3.png)\n\nSo what can be done to solve this? We need to turn the steering wheel in proportion to the error, i.e., its offset from the line. This is where the P part comes into play. Notice what will happen if we give the input as: _u(t) = Kp e(t)_\n\n![](/ERC-website-2021/static/image2.png)\n\nHere we turn the steering by a smaller angle if the error is small and the problem is solved. But there is a problem with this too! This control works well with low offset, but it may lead to a situation like below when the error is high.\n\n![](/ERC-website-2021/static/image7.png)\n\nSince the initial angle is high, the steering angle is relatively high, but as a result, it leads to the car closing in on the line much quicker, even quicker than what the car can account for by decreasing the angle; hence it will overshoot. And again, the same story will repeat from the other side, leading to oscillations.\n\nSo how do we solve this? Here‚Äôs where the D part comes in handy. The input is modified as:  _u(t) = Kp e(t)  +  Kd e'(t)_\n\nThe added term takes into account the rate of change of error. So if the error is decreasing rapidly, _e'(t)_ will be highly negative. So when the error is enormous, the proportional part will be high, but as the car starts to steer, the derivative term will increase in the negative direction, avoiding the car to turn too quickly. So we will get an ideal situation as below:\n\n![](/ERC-website-2021/static/image4.png)\n\nThis is collectively known as **PD control**.\n\nWait! There is still a problem. Only P and D can lead to an error known as steady-state error. Take the following case: Let's say the car is driving at a small constant error parallel to the marked line (purple).\n\n![](/ERC-website-2021/static/image1.png)\n\nHow will the P and D act in this case? Since the error is small, the proportional part will steer through a slight angle, but as soon as it starts turning, _e'(t)_ will become negative and nullify the P term; hence the car will continue with a constant error (steady-state error).\n\nThe I part helps to account for this error. The input function now becomes:\n\n`u(t) = Kp e(t) + Kd e'(t) + Ki ‚à´e(t).dt`\n\nIntegral term adds the net error till the current time and tries to make it zero.\n\nSo here, the integral part will add up the steady-state error and slowly reduce the error.\n\nAs we can see from the above image, the initial small steady-state error is quickly reduced to zero using the _Integral_ term.\n\nThis completes our analysis of the **PID** control law. Note that the constants Kp, Kd  & Ki are tuned ample times to get the perfect combination of the three, such that none of them overshadows the other terms, and we get our desired output.\n\nSo we come to an end of this short introduction to Control Theory. It is a math-heavy topic, and this was quite a superficial picture. For those interested to learn further and reading more about Control theory, you may go through the Controls Theory Bootcamp conducted by ERC. It involves a mathematical approach which is needed for a deeper understanding of the topic. The link for it is [here](https://github.com/erciitb/tss-controls-theory \"here\").","slug":"controls-theory"},{"frontmatter":{"title":"A trip to Iceland","author":"Watson & Crick","date":"2019-07-10T16:04:44.000Z","hero_image":"w/ERC-website-2021/static/norris-niman-iceland.jpg"},"markdownBody":"Pseudotsuga menziesii is an evergreen conifer species in the pine family, Pinaceae. It is native to western North America and is known as Douglas fir,Douglas-fir,Oregon pine,and Columbian pine. There are two varieties: coast Douglas-fir (P. menziesii var. menziesii), and Rocky Mountain Douglas-fir (P. menziesii var. glauca).\n\nChicharrones kinfolk tumblr narwhal venmo. Iceland cloud bread 8-bit, hashtag single-origin coffee keffiyeh drinking vinegar cray banjo four dollar toast bespoke tbh live-edge celiac. YOLO dreamcatcher hot chicken selvage portland XOXO, single-origin coffee sustainable mustache thundercats fixie pour-over hexagon irony deep v. Farm-to-table ennui mixtape marfa raw denim austin hell of keffiyeh chia prism ethical. Polaroid biodiesel everyday carry VHS hot chicken chartreuse typewriter messenger bag. Cloud bread truffaut street art jean shorts chia.","slug":"iceland"},{"frontmatter":{"author":"Grace Hopper","date":"2019-07-09T16:04:44.000Z","hero_image":"../ERC-website-2021/static/johannes-andersson-joshua-tree.jpg","title":"An otherworldly desert"},"markdownBody":"The Joshua tree is also called _izote de desierto_ (Spanish, \"desert dagger\").[\\[6\\]](https://en.m.wikipedia.org/wiki/Yucca_brevifolia#cite_note-ITIS-6) It was first formally described in the botanical literature as _Yucca brevifolia_ by [George Engelmann](https://en.m.wikipedia.org/wiki/George_Engelmann \"George Engelmann\") in 1871 as part of the Geological Exploration of the 100th meridian (or \"[Wheeler Survey](https://en.m.wikipedia.org/wiki/Wheeler_Survey \"Wheeler Survey\")\").[\\[7\\]](https://en.m.wikipedia.org/wiki/Yucca_brevifolia#cite_note-IPNI-7)\n\nThe name \"Joshua tree\" is commonly said to have been given by a group of [Mormon](https://en.m.wikipedia.org/wiki/Mormon \"Mormon\") settlers crossing the Mojave Desert in the mid-19th century: The tree's role in guiding them through the desert combined with its unique shape reminded them of [a biblical story](https://en.m.wikipedia.org/wiki/Conquest_of_Ai \"Conquest of Ai\") in which [Joshua](https://en.m.wikipedia.org/wiki/Joshua \"Joshua\") keeps his hands reached out for an extended period of time to guide the Israelites in their conquest of Canaan ([Joshua 8:18‚Äì26](https://en.wikisource.org/wiki/Bible_(King_James)/Joshua#8:18 \"s:Bible (King James)/Joshua\")).[\\[8\\]](https://en.m.wikipedia.org/wiki/Yucca_brevifolia#cite_note-jtnp-8)[\\[9\\]](https://en.m.wikipedia.org/wiki/Yucca_brevifolia#cite_note-9)[\\[10\\]](https://en.m.wikipedia.org/wiki/Yucca_brevifolia#cite_note-10) However, no direct or contemporary attestation of this origin exists, and the name Joshua tree is not recorded until after Mormon contact;[\\[8\\]](https://en.m.wikipedia.org/wiki/Yucca_brevifolia#cite_note-jtnp-8)[\\[11\\]](https://en.m.wikipedia.org/wiki/Yucca_brevifolia#cite_note-11) moreover, the physical appearance of the Joshua tree more closely resembles [a similar story](https://en.m.wikipedia.org/wiki/Rephidim \"Rephidim\") told of [Moses](https://en.m.wikipedia.org/wiki/Moses \"Moses\").[\\[12\\]](https://en.m.wikipedia.org/wiki/Yucca_brevifolia#cite_note-12)\n\nRanchers and miners who were contemporary with the Mormon immigrants used the trunks and branches as fencing and for fuel for ore-processing steam engines. They referred to these fallen or collapsed Joshua trees as _tevis_ stumps.\\[_[citation needed](https://en.m.wikipedia.org/wiki/Wikipedia:Citation_needed \"Wikipedia:Citation needed\")_\\]\n\nIn addition to the [autonymic](https://en.m.wikipedia.org/wiki/Autonym_(botany) \"Autonym (botany)\") [subspecies](https://en.m.wikipedia.org/wiki/Subspecies \"Subspecies\") _Yucca brevifolia_ subsp. _brevifolia_, two other subspecies have been described:[\\[13\\]](https://en.m.wikipedia.org/wiki/Yucca_brevifolia#cite_note-13) _Y. b._ subsp. _jaegeriana_ (the Jaeger Joshua tree or Jaeger's Joshua tree or pygmae yucca) and _Y. b._ subsp. _herbertii_ (Webber's yucca or Herbert Joshua tree), though both are sometimes treated as varieties[\\[6\\]](https://en.m.wikipedia.org/wiki/Yucca_brevifolia#cite_note-ITIS-6)[\\[14\\]](https://en.m.wikipedia.org/wiki/Yucca_brevifolia#cite_note-Grandtner2005-14)[\\[15\\]](https://en.m.wikipedia.org/wiki/Yucca_brevifolia#cite_note-15) or forms.[\\[16\\]](https://en.m.wikipedia.org/wiki/Yucca_brevifolia#cite_note-Egglid2001-16)\n\n## ","slug":"joshua-tree"},{"frontmatter":{"title":"Sensor Fusion","author":"Govind Saju","hero_image":"/ERC-website-2021/static/fusion_sensors_cover.jpg","date":"2021-11-24T12:30:00.000Z"},"markdownBody":"## What is Sensor Fusion?\n\nSensor Fusion refers to the process of combining measurements from different sources to ensure that resulting information has lesser uncertainty as compared to any of the individual measurements. As an example, we can calculate depth information from 2-D images by combining data from 2 cameras at slightly different locations.\n\nThe different sources for the information we obtain need not be identical. There are three types of fusion methods:\n\n* **Direct Fusion:** Fusion of data from a set of either heterogenous or homogenous set of sensors along with past history of sensor data\n* **Indirect Fusion:** Along with sources in direct fusion, we also use sources like a priori knowledge about the information, and human input.\n* **Combination of both:** We can also obtain information by combining the outputs of the above 2 methods of fusion\n\n## Classification of Sensor Fusion Algorithms\n\nSensor Fusion algorithms can be classified on different parameters:\n\n### On the basis of Abstraction Level (When?)\n\n* **Low Level Fusion:** Fusing the raw data coming in from different sensors\n* **Mid Level Fusion:** Fusing the detections from each sensor\n* **High Level Fusion:** Fusing the trajectories (predictions) of each sensor\n\n![](/ERC-website-2021/static/fusion_sensors_image3.png)\n\n### On the basis of Centralization Level (Where?)\n\n* **Centralized:** A single central unit deals with the fusion\n* **Decentralized:** Each sensor fuses the data and sends it onto the next one\n* **Distributed:** Each sensor fuses data locally and sends it to the next unit\n\n![](/ERC-website-2021/static/fusion_sensors_image2.png)\n\n### On the basis of Composition Level (What?)\n\n* **Competitive Fusion:** When different sensors are meant for the same purpose\n* **Complementary Fusion:** When different sensors are used to look at different scenes to obtain data that couldn‚Äôt have been obtained had the been used individually\n* **Coordinated Fusion:** Using multiple sensors to produce a new scene, but looking at the same object. E.g. 3D reconstruction\n\n![](/ERC-website-2021/static/fusion_sensors_image1.png)\n\nFor more details regarding the types of sensor fusion, check [here](https://www.thinkautonomous.ai/blog/?p=9-types-of-sensor-fusion-algorithms \"https://www.thinkautonomous.ai/blog/?p=9-types-of-sensor-fusion-algorithms\").\n\n##### Example Calculation Regarding Sensor Fusion\n\nFor a basic example showing how two measurements can be combined, check [this](https://en.wikipedia.org/wiki/Sensor_fusion#Example_calculations \"https://en.wikipedia.org/wiki/Sensor_fusion#Example_calculations\") section.\n\n## Algorithms on Sensor Fusion\n\n### Based on Sensor Fusion\n\n* The central limit theorem states that when we take a large number of measurements of a parameter, the distribution of their mean tends to a normal distribution, and the mean of the distribution gets closer to the true mean as number of measurements increase.\n* In order to see its relation to sensor fusion, assume we have two different sensors A and B. The more samples we take of their readings, the more closely the distribution of the sample averages will resemble a bell curve and thus approach the set‚Äôs true average value.  The closer we approach an accurate average value, the less noise will factor into sensor fusion algorithms.\n* For more information regarding the central limit theorem, check [here](https://en.wikipedia.org/wiki/Central_limit_theorem \"https://en.wikipedia.org/wiki/Central_limit_theorem\").\n\n### Based on Kalman Filter\n\n* A Kalman filter is an algorithm that estimates unknown values by taking data inputs from multiple sources, despite possibly having a high amount of signal noise.\n* It has the advantage of predicting unknown values more accurately by combining measurements than what is obtained on using the measurements individually.\n* The Kalman filter is a recursive algorithm that depends only on the previous state of the system and the current observed sensor data to estimate the current state of the system.\n* For more details regarding the Kalman filter, check [here](https://www.kalmanfilter.net/default.aspx \"https://www.kalmanfilter.net/default.aspx\") or [here](https://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/ \"https://www.bzarg.com/p/how-a-kalman-filter-works-in-pictures/\").\n\n### Based on Bayesian Networks\n\n* Bayes Rule in probability is the backbone of state update equations used for sensor fusion. Bayesian Networks based on Bayes rule predicts the likelihood that any given measurement is a contributing factor in determining a given parameter.\n* For a detailed study of Bayesian Networks, check [here](https://en.wikipedia.org/wiki/Bayesian_network \"https://en.wikipedia.org/wiki/Bayesian_network\").\n* Some of the algorithms used for Sensor Fusion based on Bayesian networks are [K2](http://web.cs.wpi.edu/\\~cs539/s05/Projects/k2_algorithm.pdf \"http://web.cs.wpi.edu/~cs539/s05/Projects/k2_algorithm.pdf\"), [hill climbing](https://www.geeksforgeeks.org/introduction-hill-climbing-artificial-intelligence/ \"https://www.geeksforgeeks.org/introduction-hill-climbing-artificial-intelligence/\"), [simulated annealing](https://en.wikipedia.org/wiki/Simulated_annealing \"https://en.wikipedia.org/wiki/Simulated_annealing\").\n\n### The Dempster-Shafer Theory\n\n* This theory, called the theory of belief functions or the evidence theory, is a general framework for working with uncertainties and measurements.\n* Dempster‚ÄìShafer theory is based on two ideas: obtaining degrees of belief for one question from subjective probabilities for a related question, and Dempster's rule for combining such degrees of belief when they are based on independent items of evidence.\n* For more details on this theory, check [here](https://en.wikipedia.org/wiki/Dempster%E2%80%93Shafer_theory \"https://en.wikipedia.org/wiki/Dempster%E2%80%93Shafer_theory\") or [here](https://www.geeksforgeeks.org/ml-dempster-shafer-theory/ \"https://www.geeksforgeeks.org/ml-dempster-shafer-theory/\").\n\n### Convolutional Neural Networks\n\n* Convolutional neural network based methods can simultaneously process many channels of sensor data. From this fusion of such data, they produce classification results based on image recognition.\n* For a detailed study of CNNs, check [here](https://towardsdatascience.com/a-comprehensive-guide-to-convolutional-neural-networks-the-eli5-way-3bd2b1164a53 \"https://towardsdatascience.com/a-comprehensive-guide-to-convolutional-neural-networks-the-eli5-way-3bd2b1164a53\").\n\n## Conclusion\n\nSensor Fusion is a vast field, with a huge number of algorithms to combine sensor data to obtain measurements. The mathematics behind sensor fusion is often complicated and requires a good understanding of concepts of probability. The goal of this article was to give a brief overview of different types of sensor fusion and to give a bird‚Äôs eye view of the various algorithms that can be used for sensor fusion.","slug":"sensor-fusion"},{"frontmatter":{"title":"Testing images","author":"Jujhaar","hero_image":"/ERC-website-2021/static/screen-shot-2021-11-28-at-14-20-01.png","date":"2021-11-24T12:30:00.000Z"},"markdownBody":"![](https://jujhaar2409.github.io/ERC-website-2021/static/image1.png)\n\nfirst inserted using url, second by insert image\n\n![](/ERC-website-2021/static/image2.png)","slug":"testing-images"}],"title":"ERC: Blog","description":"Electronics and Robotics Club, IIT Bombay's Blog"},"__N_SSG":true}